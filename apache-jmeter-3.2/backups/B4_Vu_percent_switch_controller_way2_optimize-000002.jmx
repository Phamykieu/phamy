<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1505573702000</longProp>
        <longProp name="ThreadGroup.end_time">1505573702000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="TEST_PROFILE" elementType="Argument">
              <stringProp name="Argument.name">TEST_PROFILE</stringProp>
              <stringProp name="Argument.value">${__P(TEST_PROFILE, Campaign)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEST_PROFILE" elementType="Argument">
              <stringProp name="Argument.name">TEST_PROFILE</stringProp>
              <stringProp name="Argument.value">{__P(TEST_PROFILE, Campaign)}	</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Profile" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${TEST_PROFILE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROPF - 0010 - EXC - Default" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">1ba7b1e0-f17e-4609-858e-0dc17a7e3cac</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	vars.get(&quot;ANONYMOUS_USER&quot;).toInteger()],
    [&quot;Authenticated Users&quot;,   vars.get(&quot;AUTHENTCATED_USER&quot;).toInteger()],
    [&quot;Search&quot;,   			vars.get(&quot;SEARCH&quot;).toInteger()],
    [&quot;Cart&quot;,   			vars.get(&quot;CART&quot;).toInteger()]],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROPF - 0010 - EXC - Nomal Traffic" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">d8d0ac50-91c7-4068-84ed-67f214c27f50</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	40],
    [&quot;Authenticated Users&quot;,   30],
    [&quot;Search&quot;,   			20],
    [&quot;Cart&quot;,   			10],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROPF - 0010 - EXC - Big Deal" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">6f31bc59-6112-42b1-a654-505a957d5e30</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	 5],
    [&quot;Authenticated Users&quot;,   10],
    [&quot;Search&quot;,   			15],
    [&quot;Cart&quot;,   			70],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROPF - 0010 - EXC - Campaign" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">70c44b4f-38fb-4f5e-afea-43eab4ccfad2</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	20],
    [&quot;Authenticated Users&quot;,   15],
    [&quot;Search&quot;,   			35],
    [&quot;Cart&quot;,   			30],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROPF - 0020 - EXC - Random main action" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">0cfe4b6f-0150-44e8-80f0-d079640ea19f</stringProp>
              <stringProp name="script">def varNameRandomTable  = &apos;MAIN_ACTION_RANDOM_TABLE&apos;;
def varNameAction       = &apos;MAIN_ACTION&apos;;

def randomTable = vars.getObject(varNameRandomTable);

def total = 0;
for (profile in randomTable) {
    total += profile[1];
}

def lottery = new Random().nextInt(total);
def min     = 0;
def max     = 0;
def action  = &quot;&quot;;
for (profile in randomTable) {
    max = min + profile[1];
    if (lottery &gt;= min &amp;&amp; lottery &lt; max) {
        action = profile[0];
        break;
    }
    min = max;
}

vars.put(varNameAction, action);

// completed successful
SampleResult.setSuccessful(true);
SampleResult.setResponseCode(&quot;200&quot;)
SampleResult.setResponseMessage(&quot;&quot;);
SampleResult.setResponseData(action);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions" enabled="true"/>
        <hashTree>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
            <stringProp name="SwitchController.value">${MAIN_ACTION}</stringProp>
          </SwitchController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Anonymous Users" enabled="true"/>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="AUBW - 0010 - Anonymous users browsing website" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="AUBW - 0020 - Anonymous users browsing website" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Authenticated Users" enabled="true"/>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Authenticated users browsing website" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Search" enabled="true"/>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Search Items" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cart" enabled="true"/>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Manipulating the shopping cart" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
